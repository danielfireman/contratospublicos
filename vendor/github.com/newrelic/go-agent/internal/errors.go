package internal

import (
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"strconv"
	"time"
)

const (
	// PanicErrorKlass is the error klass used for errors generated by
	// recovering panics in txn.End.
	PanicErrorKlass = "panic"
)

func panicValueMsg(v interface{}) string {
	switch val := v.(type) {
	case error:
		return val.Error()
	default:
		return fmt.Sprintf("%v", v)
	}
}

// TxnErrorFromPanic creates a new TxnError from a panic.
func TxnErrorFromPanic(v interface{}) TxnError {
	return TxnError{
		Msg:   panicValueMsg(v),
		Klass: PanicErrorKlass,
	}
}

// TxnErrorFromError creates a new TxnError from an error.
func TxnErrorFromError(err error) TxnError {
	return TxnError{
		Msg:   err.Error(),
		Klass: reflect.TypeOf(err).String(),
	}
}

// TxnErrorFromResponseCode creates a new TxnError from an http response code.
func TxnErrorFromResponseCode(code int) TxnError {
	return TxnError{
		Msg:   http.StatusText(code),
		Klass: strconv.Itoa(code),
	}
}

// TxnError is an error captured in a Transaction.
type TxnError struct {
	When  time.Time
	Stack *StackTrace
	Msg   string
	Klass string
}

// TxnErrors is a set of errors captured in a Transaction.
type TxnErrors []*TxnError

// NewTxnErrors returns a new empty TxnErrors.
func NewTxnErrors(max int) TxnErrors {
	return make([]*TxnError, 0, max)
}

// Add adds a TxnError.
func (errors *TxnErrors) Add(e *TxnError) {
	if len(*errors) < cap(*errors) {
		*errors = append(*errors, e)
	}
}

func (h *harvestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(
		[]interface{}{
			timeToFloatMilliseconds(h.When),
			h.txnName,
			h.Msg,
			h.Klass,
			struct {
				Stack      *StackTrace `json:"stack_trace"`
				Agent      JSONString  `json:"agentAttributes"`
				User       JSONString  `json:"userAttributes"`
				Intrinsics struct{}    `json:"intrinsics"`
				RequestURI string      `json:"request_uri,omitempty"`
			}{
				Stack:      h.Stack,
				User:       userAttributesStringJSON(h.attrs, destError),
				Agent:      agentAttributesStringJSON(h.attrs, destError),
				RequestURI: h.requestURI,
			},
		})
}

type harvestError struct {
	TxnError
	txnName    string
	requestURI string
	attrs      *Attributes
}

type harvestErrors struct {
	errors []*harvestError
}

func newHarvestErrors(max int) *harvestErrors {
	return &harvestErrors{
		errors: make([]*harvestError, 0, max),
	}
}

func harvestErrorFromTxnError(e *TxnError, txnName string, requestURI string, attrs *Attributes) *harvestError {
	return &harvestError{
		TxnError:   *e,
		txnName:    txnName,
		requestURI: requestURI,
		attrs:      attrs,
	}
}

func addTxnError(errors *harvestErrors, e *TxnError, txnName string, requestURI string, attrs *Attributes) {
	he := harvestErrorFromTxnError(e, txnName, requestURI, attrs)
	errors.errors = append(errors.errors, he)
}

// MergeTxnErrors merges a transaction's errors into the harvest's errors.
func MergeTxnErrors(errors *harvestErrors, errs TxnErrors, txnName string, requestURI string, attrs *Attributes) {
	for _, e := range errs {
		if len(errors.errors) == cap(errors.errors) {
			return
		}
		addTxnError(errors, e, txnName, requestURI, attrs)
	}
}

func (errors *harvestErrors) Data(agentRunID string, harvestStart time.Time) ([]byte, error) {
	if 0 == len(errors.errors) {
		return nil, nil
	}
	return json.Marshal([]interface{}{agentRunID, errors.errors})
}

func (errors *harvestErrors) MergeIntoHarvest(h *Harvest) {}
